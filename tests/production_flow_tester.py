#!/usr/bin/env python
"""
Complete Production Flow Tester
Tests the entire cart ‚Üí payment ‚Üí booking ‚Üí email flow in production
"""

import os
import sys
import django
import requests
import json
from datetime import datetime, timedelta

# Add the project root to Python path
sys.path.append('.')

# Setup Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'okpuja_backend.settings')
django.setup()

from django.contrib.auth import get_user_model
from cart.models import Cart
from payments.models import PaymentOrder
from booking.models import Booking
from payments.services import WebhookService
from accounts.models import Address

User = get_user_model()

# Production test credentials
TEST_EMAIL = "asliprinceraj@gmail.com"
TEST_PASSWORD = "Testpass@123"
PUJA_SERVICE_ID = 109
PACKAGE_ID = 309
ADDRESS_ID = 1

# Production API Base URL
BASE_URL = "https://api.okpuja.com/api"

class ProductionFlowTester:
    def __init__(self):
        self.session = requests.Session()
        self.access_token = None
        self.user = None
        self.cart = None
        self.payment = None
        self.booking = None
        
    def authenticate(self):
        """Step 1: Authentication"""
        print("üîê Step 1: Authentication")
        
        login_data = {
            "email": TEST_EMAIL,
            "password": TEST_PASSWORD
        }
        
        try:
            response = self.session.post(f"{BASE_URL}/auth/login/", json=login_data)
            if response.status_code == 200:
                result = response.json()
                self.access_token = result.get('access')
                self.session.headers.update({
                    'Authorization': f'Bearer {self.access_token}',
                    'Content-Type': 'application/json'
                })
                print(f"   ‚úÖ Login successful")
                
                # Get user object
                self.user = User.objects.get(email=TEST_EMAIL)
                return True
            else:
                print(f"   ‚ùå Login failed: {response.status_code} - {response.text}")
                return False
        except Exception as e:
            print(f"   ‚ùå Login error: {e}")
            return False
    
    def create_cart(self):
        """Step 2: Create Cart"""
        print("\nüõí Step 2: Create Cart")
        
        cart_data = {
            "puja_service": PUJA_SERVICE_ID,
            "selected_date": (datetime.now() + timedelta(days=7)).strftime("%Y-%m-%d"),
            "selected_time": "10:00 AM",
            "address": ADDRESS_ID
        }
        
        try:
            response = self.session.post(f"{BASE_URL}/cart/carts/", json=cart_data)
            if response.status_code == 201:
                result = response.json()
                cart_id = result['cart_id']
                
                # Small delay to ensure database transaction is committed
                import time
                time.sleep(1)
                
                # Try to get cart object
                try:
                    self.cart = Cart.objects.get(cart_id=cart_id)
                    print(f"   ‚úÖ Cart created: {cart_id}")
                    print(f"   üìä Total Price: ‚Çπ{self.cart.total_price}")
                    return True
                except Cart.DoesNotExist:
                    print(f"   ‚ö†Ô∏è Cart created in API but not found in local DB")
                    # Create a mock cart object for testing
                    self.cart = type('MockCart', (), {
                        'cart_id': cart_id,
                        'total_price': result.get('total_price', '0.00'),
                        'status': result.get('status', 'ACTIVE')
                    })()
                    print(f"   üîß Using mock cart for testing: {cart_id}")
                    return True
            else:
                print(f"   ‚ùå Cart creation failed: {response.status_code} - {response.text}")
                return False
        except Exception as e:
            print(f"   ‚ùå Cart creation error: {e}")
            return False
    
    def initiate_payment(self):
        """Step 3: Initiate Payment"""
        print("\nüí≥ Step 3: Initiate Payment")
        
        payment_data = {
            "cart_id": self.cart.cart_id
        }
        
        try:
            response = self.session.post(f"{BASE_URL}/payments/cart/", json=payment_data)
            if response.status_code == 200:
                result = response.json()
                payment_data = result['data']['payment_order']
                
                # Get payment object
                self.payment = PaymentOrder.objects.get(id=payment_data['id'])
                print(f"   ‚úÖ Payment initiated: {self.payment.merchant_order_id}")
                print(f"   üí∞ Amount: ‚Çπ{self.payment.amount}")
                print(f"   üåê PhonePe URL: {payment_data.get('phonepe_payment_url', 'Not generated')}")
                return True
            else:
                print(f"   ‚ùå Payment initiation failed: {response.status_code} - {response.text}")
                return False
        except Exception as e:
            print(f"   ‚ùå Payment initiation error: {e}")
            return False
    
    def simulate_payment_success(self):
        """Step 4: Simulate Payment Success"""
        print("\n‚úÖ Step 4: Simulate Payment Success")
        
        try:
            # Update payment status to SUCCESS
            self.payment.status = 'SUCCESS'
            self.payment.phonepe_transaction_id = f'TXN_TEST_{self.payment.merchant_order_id[-8:]}'
            self.payment.save()
            print(f"   ‚úÖ Payment marked as SUCCESS")
            
            # Simulate webhook processing
            webhook_service = WebhookService()
            
            # Create booking from cart
            self.booking = webhook_service._create_booking_from_cart(self.payment)
            
            if self.booking:
                print(f"   ‚úÖ Booking created: {self.booking.book_id}")
                print(f"   üìÖ Date: {self.booking.selected_date}")
                print(f"   ‚è∞ Time: {self.booking.selected_time}")
                print(f"   üìä Status: {self.booking.status}")
                return True
            else:
                print(f"   ‚ùå Booking creation failed")
                return False
        except Exception as e:
            print(f"   ‚ùå Payment success simulation error: {e}")
            return False
    
    def verify_booking_creation(self):
        """Step 5: Verify Booking Creation"""
        print("\nüìã Step 5: Verify Booking Creation")
        
        try:
            # Check booking via API
            response = self.session.get(f"{BASE_URL}/booking/bookings/by-cart/{self.cart.cart_id}/")
            if response.status_code == 200:
                result = response.json()
                api_booking = result['data']
                print(f"   ‚úÖ Booking retrieved via API: {api_booking['book_id']}")
                
                # Verify database booking
                db_booking = Booking.objects.filter(cart=self.cart).first()
                if db_booking:
                    print(f"   ‚úÖ Database booking confirmed: {db_booking.book_id}")
                    
                    # Check if IDs match
                    if api_booking['book_id'] == db_booking.book_id:
                        print(f"   ‚úÖ API and Database booking IDs match")
                        return True
                    else:
                        print(f"   ‚ö†Ô∏è API and Database booking IDs don't match")
                        return False
                else:
                    print(f"   ‚ùå No booking found in database")
                    return False
            else:
                print(f"   ‚ùå Booking retrieval failed: {response.status_code} - {response.text}")
                return False
        except Exception as e:
            print(f"   ‚ùå Booking verification error: {e}")
            return False
    
    def check_cart_cleanup(self):
        """Step 6: Check Cart Cleanup"""
        print("\nüßπ Step 6: Check Cart Cleanup")
        
        try:
            # Refresh cart from database
            self.cart.refresh_from_db()
            
            if self.cart.status == Cart.StatusChoices.CONVERTED:
                print(f"   ‚úÖ Cart status converted: {self.cart.status}")
                return True
            else:
                print(f"   ‚ö†Ô∏è Cart status not converted: {self.cart.status}")
                return False
        except Exception as e:
            print(f"   ‚ùå Cart cleanup check error: {e}")
            return False
    
    def check_email_notification(self):
        """Step 7: Check Email Notification"""
        print("\nüìß Step 7: Check Email Notification")
        
        try:
            # Test email task
            from core.tasks import send_booking_confirmation
            
            # Execute the task
            result = send_booking_confirmation.apply(args=[self.booking.id])
            print(f"   ‚úÖ Email task executed: {result}")
            print(f"   üì¨ Check your email at: {TEST_EMAIL}")
            return True
        except Exception as e:
            print(f"   ‚ùå Email notification error: {e}")
            return False
    
    def check_payment_booking_link(self):
        """Step 8: Check Payment-Booking Link"""
        print("\nüîó Step 8: Check Payment-Booking Link")
        
        try:
            # Verify payment ID is accessible from booking
            if hasattr(self.booking, 'payment_details'):
                payment_details = self.booking.payment_details
                if payment_details:
                    print(f"   ‚úÖ Payment details accessible from booking")
                    print(f"   üí≥ Payment ID: {payment_details.get('merchant_order_id', 'N/A')}")
                    print(f"   üí∞ Amount: ‚Çπ{payment_details.get('amount', 'N/A')}")
                    return True
                else:
                    print(f"   ‚ö†Ô∏è Payment details not found in booking")
                    return False
            else:
                print(f"   ‚ö†Ô∏è Payment details property not available")
                return False
        except Exception as e:
            print(f"   ‚ùå Payment-booking link check error: {e}")
            return False
    
    def generate_redirect_urls(self):
        """Step 9: Generate Redirect URLs"""
        print("\nüåê Step 9: Generate Redirect URLs")
        
        try:
            # Success redirect URL
            success_url = f"https://www.okpuja.com/confirmbooking?cart_id={self.cart.cart_id}&order_id={self.payment.merchant_order_id}&redirect_source=phonepe"
            print(f"   ‚úÖ Success redirect URL:")
            print(f"   {success_url}")
            
            # Booking details URL
            booking_url = f"{BASE_URL}/booking/get/{self.booking.book_id}/"
            print(f"   ‚úÖ Booking details API:")
            print(f"   {booking_url}")
            
            return True
        except Exception as e:
            print(f"   ‚ùå Redirect URL generation error: {e}")
            return False
    
    def run_complete_test(self):
        """Run complete flow test"""
        print("=" * 80)
        print("üöÄ PRODUCTION FLOW COMPLETE TEST")
        print("=" * 80)
        
        steps = [
            ("Authentication", self.authenticate),
            ("Create Cart", self.create_cart),
            ("Initiate Payment", self.initiate_payment),
            ("Simulate Payment Success", self.simulate_payment_success),
            ("Verify Booking Creation", self.verify_booking_creation),
            ("Check Cart Cleanup", self.check_cart_cleanup),
            ("Check Email Notification", self.check_email_notification),
            ("Check Payment-Booking Link", self.check_payment_booking_link),
            ("Generate Redirect URLs", self.generate_redirect_urls)
        ]
        
        passed_steps = 0
        total_steps = len(steps)
        
        for step_name, step_function in steps:
            try:
                if step_function():
                    passed_steps += 1
                else:
                    print(f"   ‚ö†Ô∏è Step failed but continuing...")
            except Exception as e:
                print(f"   ‚ùå Step crashed: {e}")
        
        print("\n" + "=" * 80)
        print("üìä FINAL RESULTS")
        print("=" * 80)
        print(f"Steps Passed: {passed_steps}/{total_steps}")
        print(f"Success Rate: {(passed_steps/total_steps)*100:.1f}%")
        
        if passed_steps == total_steps:
            print("üéâ ALL TESTS PASSED! Production flow is working perfectly!")
        elif passed_steps >= total_steps * 0.8:
            print("‚úÖ MOSTLY WORKING! Minor issues detected but core flow is functional.")
        else:
            print("‚ö†Ô∏è ISSUES DETECTED! Please check the failed steps above.")
        
        # Summary
        if self.cart:
            print(f"\nTest Results Summary:")
            print(f"   üõí Cart ID: {self.cart.cart_id}")
            if self.payment:
                print(f"   üí≥ Payment ID: {self.payment.merchant_order_id}")
            if self.booking:
                print(f"   üìã Booking ID: {self.booking.book_id}")
        
        return passed_steps == total_steps

if __name__ == "__main__":
    tester = ProductionFlowTester()
    success = tester.run_complete_test()
    
    if success:
        print("\nüéØ Ready for production testing!")
    else:
        print("\nüîß Please fix the issues before production testing.")
